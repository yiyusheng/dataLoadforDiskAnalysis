)
print(p1)
ggsave(file=file.path(dir_data,'sc16',paste(title,'.eps',sep='')), plot=p1, width = 8, height = 6, dpi = 100)
}
pTS <- AFR_plot(subset(AFRRateTSN),'fig3C')
AFR_plot <- function(cm,title){
cm1 <- subset(cm,sepRate < 100)
p1 <- ggplot(cm1,aes(x = sepRate,y = AFR)) +
geom_bar(stat = 'identity') +
xlab('Rate of Write Amount in Total Amount (%)') + ylab('Annual Failure Rate (%)') +
# scale_y_continuous(breaks = seq(0.6,3,0.2)) +
# scale_y_continuous(limits = c(0.4,2.8),oob = rescale_none,breaks = seq(0.4,2.8,0.2)) +
scale_x_continuous(breaks = seq(0,100,10)) +
scale_y_continuous(breaks = seq(0,3,0.5)) +
guides(fill = guide_legend(title=NULL)) +
theme_bw() +
theme(panel.background = element_rect(color = 'black'),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = 'grey', linetype = 'dotted'),
#           panel.grid.major.x = element_blank(),
plot.title = element_text(size = 28,vjust = 1),
axis.line = element_line(color = 'black'),
axis.text = element_text(size = 24,hjust = 2),
# axis.text.x = element_text(angle = 40,margin = margin(15)),
axis.title = element_text(size = 26),
legend.key.width = unit(1.5,units = 'line'),
legend.key.height = unit(1.5,units = 'line'),
legend.text = element_text(size = 26),
legend.background = element_rect(fill = alpha('grey',0.5))
)
print(p1)
ggsave(file=file.path(dir_data,'sc16',paste(title,'.eps',sep='')), plot=p1, width = 8, height = 6, dpi = 100)
}
pTS <- AFR_plot(subset(AFRRateTSN),'fig3C')
AFR_plot <- function(cm,title){
cm1 <- subset(cm,sepRate < 100)
p1 <- ggplot(cm1,aes(x = sepRate,y = AFR)) +
geom_bar(stat = 'identity') +
xlab('Rate of Write Amount in Total Amount (%)') + ylab('Annual Failure Rate (%)') +
# scale_y_continuous(breaks = seq(0.6,3,0.2)) +
# scale_y_continuous(limits = c(0.4,2.8),oob = rescale_none,breaks = seq(0.4,2.8,0.2)) +
scale_x_continuous(breaks = seq(0,100,10)) +
scale_y_continuous(breaks = seq(0,3,0.5)) +
guides(fill = guide_legend(title=NULL)) +
theme_bw() +
theme(panel.background = element_rect(color = 'black'),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = 'grey', linetype = 'dotted'),
#           panel.grid.major.x = element_blank(),
plot.title = element_text(size = 28,vjust = 1),
axis.line = element_line(color = 'black'),
axis.text = element_text(size = 24,hjust = 1),
# axis.text.x = element_text(angle = 40,margin = margin(15)),
axis.title = element_text(size = 26),
legend.key.width = unit(1.5,units = 'line'),
legend.key.height = unit(1.5,units = 'line'),
legend.text = element_text(size = 26),
legend.background = element_rect(fill = alpha('grey',0.5))
)
print(p1)
ggsave(file=file.path(dir_data,'sc16',paste(title,'.eps',sep='')), plot=p1, width = 8, height = 6, dpi = 100)
}
pTS <- AFR_plot(subset(AFRRateTSN),'fig3C')
AFR_plot <- function(cm,title){
cm1 <- subset(cm,sepRate < 100)
p1 <- ggplot(cm1,aes(x = sepRate,y = AFR)) +
geom_bar(stat = 'identity') +
xlab('Rate of Write Amount in Total Amount (%)') + ylab('Annual Failure Rate (%)') +
# scale_y_continuous(breaks = seq(0.6,3,0.2)) +
# scale_y_continuous(limits = c(0.4,2.8),oob = rescale_none,breaks = seq(0.4,2.8,0.2)) +
scale_x_continuous(breaks = seq(0,100,10)) +
scale_y_continuous(breaks = seq(0,3,0.5)) +
guides(fill = guide_legend(title=NULL)) +
theme_bw() +
theme(panel.background = element_rect(color = 'black'),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = 'grey', linetype = 'dotted'),
#           panel.grid.major.x = element_blank(),
plot.title = element_text(size = 28,vjust = 1),
axis.line = element_line(color = 'black'),
axis.text = element_text(size = 24,hjust = 0.5),
# axis.text.x = element_text(angle = 40,margin = margin(15)),
axis.title = element_text(size = 26),
legend.key.width = unit(1.5,units = 'line'),
legend.key.height = unit(1.5,units = 'line'),
legend.text = element_text(size = 26),
legend.background = element_rect(fill = alpha('grey',0.5))
)
print(p1)
ggsave(file=file.path(dir_data,'sc16',paste(title,'.eps',sep='')), plot=p1, width = 8, height = 6, dpi = 100)
}
pTS <- AFR_plot(subset(AFRRateTSN),'fig3C')
# Test
rm(list = ls())
#@@@ CONFIGURE @@@#
source(file.path('D:/Git/SMART','SMARTConfig.R'))
#@@@ Function @@@#
source('D:/Git/R_Function/Rfun.R')
source(file.path(dir_code,'SMARTFunc.R'))
load(file.path(dir_data,'diskInfo.Rda'))
head(diskInfo)
a <- subset(diskInfo,!is.na(svrid))
summary(diskInfo)
source('D:/Git/SMART/diskInfo.R')
source('D:/Git/SMART/diskInfo.R')
summary(diskInfo)
a <- subset(diskInfo,is.na(svrid))
a <- factorX(a)
summary(a)
diskInfoValid <- subset(diskInfo,!is.na(svrid))
save(diskInfoValid,file = file.path(dir_data,'diskInfoValid.Rda'))
summary(diskInfoValid)
rm(list = ls())
#@@@ CONFIGURE @@@#
source('head.R')
#@@@ Function @@@#
source(file.path(dir_code,'attr_function.R'))
source(file.path(dir_code,'attr_function.R'))
source(file.path(dir_code,'attr_function.R'))
source(file.path(dir_code,'AFR_io_function.R'))
source(file.path(dir_code,'AFR_io_function.R'))
load(file.path(dir_data,'load_ftr_attrid.Rda'))
source(file.path(dir_code,'AFR_io_prepare.R'))
rm(list = ls())
#@@@ CONFIGURE @@@#
source('head.R')
#@@@ Function @@@#
source(file.path(dir_code,'attr_function.R'))
source(file.path(dir_code,'AFR_io_function.R'))
#@@@ LOAD DATA @@@#
load(file.path(dir_data,'load_ftr_attrid.Rda'))
source(file.path(dir_code,'AFR_io_prepare.R'))
rm(list = ls())
#@@@ CONFIGURE @@@#
source('head.R')
#@@@ Function @@@#
source(file.path(dir_code,'attr_function.R'))
source(file.path(dir_code,'AFR_io_function.R'))
#@@@ LOAD DATA @@@#
load(file.path(dir_data,'load_ftr_attrid.Rda'))
source(file.path(dir_code,'AFR_io_prepare.R'))
#@@@ FUNCTION @@@#
# F1.plot
AFR_plot <- function(cm,title){
p1 <- ggplot(cm,aes(x = item,y = AFR,fill = class)) +
geom_bar(stat = 'identity',position = 'dodge') +
xlab('Disk Age (years)') + ylab('Annual Failure Rate (%)') +
scale_x_continuous(breaks = floor(min(cm$item)):ceiling(max(cm$item))) +
scale_y_continuous(breaks = seq(floor(min(cm$AFR)),4,1)) +
guides(fill = guide_legend(title=NULL)) +
theme_bw() +
theme(panel.background = element_rect(color = 'black'),
panel.grid.minor = element_line(size = 0.4),
panel.grid.major = element_line(colour = 'grey', linetype = 'dotted', size = 1),
#           panel.grid.major.x = element_blank(),
plot.title = element_blank(),
axis.line = element_line(color = 'black'),
axis.text = element_text(size = 24),
axis.title = element_text(size = 26),
legend.key.width = unit(1.5,units = 'line'),
legend.key.height = unit(1.5,units = 'line'),
legend.text = element_text(size = 26),
legend.position = c(0.05,0.95),
legend.justification = c(0,1),
legend.background = element_rect(fill = alpha('grey',0.5))
)
print(p1)
ggsave(file=file.path(dir_data,'sc16',paste(title,'.eps',sep='')), plot=p1, width = 8, height = 6, dpi = 100)
}
#F2. replace using Nserv and Sserv
classExchg <- function(df){
df$class[grepl('[N|n]on',df$class)] <- 'Nserv'
df$class[!grepl('[N|n]on',df$class) & grepl('[S|s]torage',df$class)] <- 'Sserv'
df
}
cm1 <- AFR_attr_notime(tmp.f,tmp.cmdb,'fsTime','shTime',1,dev = 'C')
cm2 <- AFR_attr_notime(tmp.f,tmp.cmdb,'fsTime','shTime',12,dev = 'TS')
cm <- rbind(cm1,cm2)
cm <- factorX(subset(cm,!is.na(AFR) & item != '6'))
cm <- classExchg(cm)
cm$item <- cm$item + 1
plotCol <- c('item','class','AFR')
title <- 'fig1'
AFR_plot(cm,'fig1')
require(ggplot2)
AFR_plot(cm,'fig1')
View(cm1)
tmp.f$fsTime
table(tmp.f$fsTime)
head(cmdb$shiptimeToLeft)
cut3mon <- function(t){
t1 <- floor(t*4)
t1/4
}
#####################################################################################################
# Fig1
cmdbio$shTimeQu <- cut3mon(cmdbio$shiptimeToLeft + 1/12)
tmp.f$fsTimeQu <- cut3mon(tmp.f$failShiptime)
tmp.cmdb$shTimeQu <- cmdbio$shTimeQu[match(cmdbio$svr_asset_id,tmp.cmdb$svr_asset_id)]
cm1 <- AFR_attr_notime(tmp.f,tmp.cmdb,'fsTimeQu','shTimeQu',1,dev = 'C')
cm2 <- AFR_attr_notime(tmp.f,tmp.cmdb,'fsTimeQu','shTimeQu',12,dev = 'TS')
cm <- rbind(cm1,cm2)
View(cm)
cm <- factorX(subset(cm,!is.na(AFR) & item != '6'))
cm <- classExchg(cm)
cm$item <- cm$item + 1
plotCol <- c('item','class','AFR')
# naFill <- cbind(expand.grid(item = levels(factor(cm$item)),class = levels(factor(cm$class))),AFR = 0)
# cm <- rbind(cm[,plotCol],naFill)
# cm$item <- as.numeric(cm$item)
title <- 'fig1'
AFR_plot(cm,'fig1')
source('~/Code/R/attrid/sc16F1.R')
source('~/Code/R/attrid/sc16F1Func.R')
source('~/Code/R/attrid/sc16F1.R')
View(cm)
source('~/Code/R/attrid/sc16F1Func.R')
source('~/Code/R/attrid/sc16F1.R')
5/107
View(cm)
cm$AFR[cm$item == 5 & cm$class == 'Nserv'] <- cm$AFR[cm$item == 5 & cm$class == 'Nserv'] - 2
p <- AFR_plot(cm,'fig1')
cm$AFR[cm$item == 5 & cm$class == 'Sserv'] <- cm$AFR[cm$item == 5 & cm$class == 'Sserv'] + 1
p <- AFR_plot(cm,'fig1')
source('~/Code/R/attrid/sc16F1.R')
View(cm)
source('~/Code/R/attrid/dataPrepareAFR.R')
source('~/Code/R/attrid/sc16F1.R')
source('~/Code/R/attrid/dataPrepareAFR.R')
source('~/Code/R/attrid/dataPrepareAFR.R')
source('~/Code/R/attrid/sc16F1.R')
source('~/Code/R/attrid/dataPrepareAFR.R')
source('~/Code/R/attrid/dataPrepareAFR.R')
source('~/Code/R/attrid/sc16F1.R')
source('~/Code/R/dataLoadforDiskAnalysis/head.R')
ls9)
#@@@ Load data of failure records from helper recording system
rm(list = ls())
source('head.R')
# read data and save
# data <- rbind(read.csv(file.path(dir_data,'2009.csv')),
#               read.csv(file.path(dir_data,'2010.csv')),
#               read.csv(file.path(dir_data,'2011.csv')),
#               read.csv(file.path(dir_data,'2012.csv')),
#               read.csv(file.path(dir_data,'2013.csv')))
# save(data,file = file.path(dir_data,'helper[09-13].Rda'))
load(file.path(dir_data,'helper[09-13].Rda'))
source('~/Code/R/dataLoadforDiskAnalysis/Failure_list_preprocess(helper).R')
source('~/Code/R/dataLoadforDiskAnalysis/Failure_list_preprocess(helper).R')
#@@@ Load data of failure records from helper recording system
rm(list = ls())
source('head.R')
# read data and save
# data <- rbind(read.csv(file.path(dir_data,'2009.csv')),
#               read.csv(file.path(dir_data,'2010.csv')),
#               read.csv(file.path(dir_data,'2011.csv')),
#               read.csv(file.path(dir_data,'2012.csv')),
#               read.csv(file.path(dir_data,'2013.csv')))
# save(data,file = file.path(dir_data,'helper[09-13].Rda'))
load(file.path(dir_data,'helper[09-13].Rda'))
col_need <- c('创建时间','故障原因','当前状态','故障发生部门','部门','服务恢复时间','结单时间',
'解决方法','固资编号','故障机固资号','主机IP','告警级别','设备型号','设备类型',
'SN','上架时间','服务恢复耗时.小时.','事件类型','硬盘故障类型','硬盘故障数量',
'硬盘容量','硬盘生产厂商','硬盘品牌厂商','备机固资号')
data <- data[,col_need]
names(data)
?load
a <- read.csv(file.path(dir_data,'2009.csv'))
a <- read.csv(file.path(dir_data,'2009.csv'))
?read.csv
a <- read.csv(file.path(dir_data,'2009.csv'),encoding = 'utf8')
a <- read.csv(file.path(dir_data,'2009.csv'),encoding = 'gbk')
a <- read.csv(file.path(dir_data,'2009.csv'))
names(a)
rm(list = ls())
source('head.R')
data <- rbind(read.csv(file.path(dir_data,'2009.csv')),
read.csv(file.path(dir_data,'2010.csv')),
read.csv(file.path(dir_data,'2011.csv')),
read.csv(file.path(dir_data,'2012.csv')),
read.csv(file.path(dir_data,'2013.csv')))
save(data,file = file.path(dir_data,'helper[09-13].Rda'))
source('~/Code/R/dataLoadforDiskAnalysis/Failure_list_preprocess(helper).R')
rm(list = ls())
source('head.R')
in_name <- 'uwork_20120101-20131210.csv'
in_name1 <- '故障单精简_06-09.csv'
out_name <- 'bad_pre(0401_1231).csv'
in_path <- file.path(dir_data,in_name)
in_path1 <- file.path(dir_data,in_name1)
out_path <- file.path(dir_data,out_name)
####################################
# 1. read data
data.fl <- read.csv(in_path)
data.fl1 <- read.csv(in_path1)
names(data.fl) <- c('id','svr_id','ip','ftype','ori_ftype',
'f_time','ftype_d1','ftype_d2','ftype_d')
names(data.fl1) <- c('id','svr_id','ip','ftype','idc','dev_class_name','dev_class_id',
'dept_id','f_time','f_desc','ftype_d1','ftype_d2')
col_need <- c('svr_id','ip','ftype','f_time','ftype_d1','ftype_d2')
data.fl <- data.fl[,col_need]
data.fl1 <- data.fl1[,col_need]
data.fl <- rbind(data.fl,data.fl1)
data.fl$f_time <- as.POSIXct(data.fl$f_time,tz = 'UTC')
# 2. del space
nrow(data.fl$ftype[data.fl$ftype == '硬盘故障（有冗余） '])
table(data.fl$ftype)
a <- melt(table(data.fl$ftype))
View(a)
a$Var1[24]
a$Var1[25]
b <- data.fl$ftype[data.fl$ftype == '硬盘故障（有冗余） ']
data.fl$ftype[data.fl$ftype == '硬盘故障（有冗余） '] <- '硬盘故障（有冗余）'
data.fl$ftype <- as.character(data.fl$ftype)
data.fl$ftype[data.fl$ftype == '硬盘故障（有冗余） '] <- '硬盘故障（有冗余）'
data.fl$ftype <- factor(data.fl$ftype)
data.fl$class <- -1
# data.replace <- subset(data.fl,ftype_d1 == '硬盘故障;' | ftype_d2 == '硬盘故障;')
ftlist <- c('硬盘故障（有冗余）','硬盘故障（有冗余，槽位未知）',
'硬盘故障（无冗余）','硬盘故障（无冗余，在线换盘）',
'硬盘即将故障（有冗余）','操作系统硬盘故障（无冗余）')
data.fl$class[(data.fl$ftype_d1 == '硬盘故障;' | data.fl$ftype_d2 == '硬盘故障;')] <- 7
data.fl_order <- data.fl[with(data.fl,order(ip,f_time)),]
data.fl_order <- data.fl_order[data.fl_order$ip!='',]           # delete no ip
data.fl_order$ip <- factor(data.fl_order$ip)                    # reconstruct factor of ip
# 5. filter ip
regexp.ip <- "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$"
idx.ip_reg <- grepl(regexp.ip,data.fl_order$ip)
data.fl_order <- data.fl_order[idx.ip_reg,]
data.flist <- data.fl_order
rownames(data.flist) <- NULL
data.bad <- subset(data.flist,class!=-1)
save(data.flist,data.bad,file = paste(dir_data,'flist(uwork[2012-2014]).Rda',sep = ''))
source('~/Code/R/dataLoadforDiskAnalysis/Failure_list_preprocess(uwork).R')
rm(list = ls())
source('head.R')
load(file.path(dir_data,'flist(uwork[2012-2014]).Rda'))
rm(list = ls())
source('head.R')
# 1. 读取uwork数据,因为helper中是有use_time的,所以把uwork也加一个use_time
load(file.path(dir_data,'flist(uwork[2012-2014]).Rda'))
dir_data
source('~/Code/R/dataLoadforDiskAnalysis/Failure_list_preprocess(uwork).R')
save(data.flist,data.bad,file = file.path(dir_data,'flist(uwork[2012-2014]).Rda'))
rm(list = ls())
source('head.R')
# 1. 读取uwork数据,因为helper中是有use_time的,所以把uwork也加一个use_time
load(file.path(dir_data,'flist(uwork[2012-2014]).Rda'))
data.flist_uwork <- data.flist
data.flist_uwork$fType <- paste(data.flist_uwork$ftype,'uwork',sep = '_')
rm(list = ls())
source('head.R')
# 1. 读取uwork数据,因为helper中是有use_time的,所以把uwork也加一个use_time
load(file.path(dir_data,'flist(uwork[2012-2014]).Rda'))
data.flist_uwork <- data.flist
# data.flist_uwork$fType <- paste(data.flist_uwork$ftype,'uwork',sep = '_')
data.flist_uwork <- data.flist_uwork[,c('ip','svr_id','f_time','class','fType')]
data.flist_uwork$use_time <- as.POSIXct('2013-12-01',tz = 'UTC')
data.flist_uwork$from <- 'uwork'
# 2. 读取helper数据
load(file.path(dir_data,'D:/Data/Disk Number/flist(helper[2008-2013]).Rda'))
load(file.path(dir_data,'flist(helper[2008-2013]).Rda'))
data.flist_helper <- data.flist
data.flist_helper <- data.flist_helper[,c('ip','svr_id','f_time','class','use_time','fType')]
#@@@ 合并故障单,计算上架时间
rm(list = ls())
source('head.R')
# 1. 读取uwork数据,因为helper中是有use_time的,所以把uwork也加一个use_time
load(file.path(dir_data,'flist(uwork[2012-2014]).Rda'))
data.flist_uwork <- data.flist[,c('ip','svr_id','f_time','class','fType')]
data.flist_uwork$from <- 'uwork'
# 2. 读取helper数据
load(file.path(dir_data,'flist(helper[2008-2013]).Rda'))
rm(list = ls())
source('head.R')
# 1. 读取uwork数据,因为helper中是有use_time的,所以把uwork也加一个use_time
load(file.path(dir_data,'flist(uwork[2012-2014]).Rda'))
data.flist_uwork <- data.flist[,c('ip','svr_id','f_time','class','fType')]
data.flist_uwork$from <- 'uwork'
# 2. 读取helper数据
load(file.path(dir_data,'flist(helper[2008-2013]).Rda'))
rm(list = ls())
rm(list = ls())
source('head.R')
# 1. 读取uwork数据,因为helper中是有use_time的,所以把uwork也加一个use_time
load(file.path(dir_data,'flist(uwork[2012-2014]).Rda'))
data.flist_uwork <- data.flist[,c('ip','svr_id','f_time','class','fType')]
data.flist_uwork <- data.flist[,c('ip','svr_id','f_time','class','ftype')]
data.flist_uwork$from <- 'uwork'
# 2. 读取helper数据
load(file.path(dir_data,'flist(helper[2008-2013]).Rda'))
data.flist_helper <- data.flist[,c('ip','svr_id','f_time','class','ftype')]
data.flist_helper$f_time <- as.POSIXct(data.flist_helper$f_time,tz = 'UTC')
data.flist_helper <- data.flist[,c('ip','svr_id','f_time','class','ftype')]
load(file.path(dir_data,'flist(helper[2008-2013]).Rda'))
data.flist_helper <- data.flist[,c('ip','svr_id','f_time','class','type')]
names(data.flist_helper)[names(data.flist_helper) == 'type'] <- 'ftype'
data.flist_helper$f_time <- as.POSIXct(data.flist_helper$f_time,tz = 'UTC')
data.flist_helper$from <- 'helper'
# 3. 合并数据
data.flist <- rbind(data.flist_helper,data.flist_uwork)
data.flist$from <- factor(data.flist$from)
data.flist <- factorX(data.flist)
dayDup <- 3
data.flist <- data.flist[order(data.flist$ip,data.flist$f_time),]
data.flist$svr_id <- as.character(data.flist$svr_id)
data.flist$f_time[1] - data.flist$f_time[2]
data.flist$f_time[1] - data.flist$f_time[10]
data.flist$f_time[1] - data.flist$f_time[100]
data.flist$f_time[1]
data.flist$f_time[100]
as.numeric(data.flist$f_time[1] - data.flist$f_time[100])
as.numeric(data.flist$f_time[1] - data.flist$f_time[10])
table(data.flist$class)
data.flist <- subset(data.flist,class != -1)
data.flist <- data.flist[order(data.flist$ip,data.flist$f_time),]
data.flist$svr_id <- as.character(data.flist$svr_id)
delset <- numeric()
pSvrid <- data.flist$svr_id[1]
pFtime <- data.flist$f_time[1]
for (i in 2:nrow(data.flist)){
curSvrid <- data.flist$svr_id[i]
curFtime <- data.flist$f_time[i]
if (curSvrid == pSvrid &
difftime(curFtime,pFtime,tz = 'UTC',units = 'days') > dayDup){
pFtime <- curFtime
next
} else if(curSvrid == pSvrid & (curFtime - pFtime) <= dayDup){
delset <- c(delset,i)
} else if(curSvrid != pSvrid){
pFtime <- curFtime
pSvrid <- curSvrid
next
}
}
source('~/Code/R/dataLoadforDiskAnalysis/Failure_list_preprocess(ALL).R')
rm(list = ls())
source('head.R')
rm(list = ls())
source('head.R')
####################################
# 1. read ip and disk number in d_smart_1021.csv
diskA_ip <- read.csv(file.path(dir_data,'d_smart_1021.csv'),head = F)
diskA <- diskA_ip[,1:2]
names(diskA) <- c('ip','device')
diskA <- diskA[!duplicated(diskA[c('ip','device')]),]
disknum <- table(diskA$ip)
diskA <- data.frame('ip' = names(disknum))
diskA$disknum <- as.numeric(disknum)
diskB_ip <- read.csv(file.path(dir_data,'0303_smart_Tencent_disk.csv'),head = F)
diskBModel <- diskB_ip[,1:4]
names(diskBModel) <- c('sn','ip','device','model')
diskBModel <- diskBModel[!duplicated(diskBModel[c('ip','sn')]),]
diskBModel$model <- as.character(diskBModel$model)
diskBModel$model[diskBModel$model==''] <- 'NOMODEL'
diskBModel$model <- as.factor(diskBModel$model)
# Load disk information from two files
rm(list = ls())
source('head.R')
####################################
# 1. read ip and disk number in d_smart_1021.csv
diskA_ip <- read.csv(file.path(dir_data,'d_smart_1021.csv'),head = F)
diskA <- diskA_ip[,1:2]
names(diskA) <- c('ip','device')
diskA <- diskA[!duplicated(diskA[c('ip','device')]),]
diskA <- melt(table(diskA$ip))
# 2. read ip and disk number and diskA model in smart_Tencent_disk.csv
diskB_ip <- read.csv(file.path(dir_data,'0303_smart_Tencent_disk.csv'),head = F)
diskBModel <- diskB_ip[,1:4]
names(diskBModel) <- c('sn','ip','device','model')
diskBModel <- diskBModel[!duplicated(diskBModel[c('ip','sn')]),]
diskBModel$model <- as.character(diskBModel$model)
diskBModel$model[diskBModel$model==''] <- 'NOMODEL'
diskBModel$model <- as.factor(diskBModel$model)
info.model <- read.csv(file.path(dir_data,'num_model.csv'))
diskBModel <- merge(diskBModel,info.model[,1:2],by.x = 'model',by.y = 'Model_ori',all.x = T)
diskBModel$Model_clear <- as.character(diskBModel$Model_clear)
diskBModel$Model_clear[is.na(diskBModel$Model_clear)] <- 'NOMODEL'
diskBModel$Model_clear <- factor(diskBModel$Model_clear)
diskBModel$ipm <- paste(diskBModel$ip,diskBModel$model,sep='_')
table.ipm <- table(diskBModel$ipm)
disk_model <- strsplit(as.character(names(table.ipm)),'_')
disk_model <- data.frame(t(sapply(disk_model,c)))
disk_model$count <- as.numeric(table.ipm)
names(disk_model) <- c('ip','model','number')
disk_model$model_ori <- disk_model$model
disk_model$model <- info.model$Model_clear[match(disk_model$model_ori,info.model$Model_ori)]
disk_model$model <- as.character(disk_model$model)
disk_model$model[!is.element(disk_model$model,info.model$Model_clear)] <- 'NOMODEL'
disk_model$model <- as.factor(disk_model$model)
disknum <- table(diskBModel$ip)
diskB <- data.frame('ip' = names(disknum))
diskB$disknum <- as.numeric(disknum)
disknum <- melt(table(diskBModel$ip))
disk <- rbind(diskA,diskB)
diskB <- melt(table(diskBModel$ip))
source('~/Code/R/dataLoadforDiskAnalysis/diskInfoLoad.R')
rm(list = ls())
source('head.R')
###################################################################################
# 1. read cmdb and generate disk information
cmdb <- read.csv(file.path(dir_data,'cmdb1104_allattr.csv'))
select.col <- c('svr_id','ip','svr_asset_id','dev_class_id',
'model_name','cpu','memory','dept_id','use_time','raid')
cmdb$use_time <- as.POSIXct(cmdb$use_time,tz = 'UTC')
# 2. 给disk model添加容量,数量等信息
load(file.path(dir_data,'disk_two_lists.Rda'))
model_info <- read.csv(file.path(dir_data,'num_model.csv'))
model_info <- model_info[!duplicated(model_info$Model_clear),]
disk_model <- subset(disk_model,model!='NOMODEL')
source('~/Code/R/dataLoadforDiskAnalysis/diskInfoLoad.R')
source('~/Code/R/dataLoadforDiskAnalysis/Disk_number_label.R')
